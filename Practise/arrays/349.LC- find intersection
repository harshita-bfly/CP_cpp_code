Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]



class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
         
        // why sort
        //bec if in 1 2 2 and 2 2..first elem are not equal...so my ptrs i and j both cant move together
        //either i at a instance or j;...so sort to avoid this confusion
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());

        int i=0;
        int j=0;
        int n=nums1.size();
        int m=nums2.size();
      //set to be used for unique value storage
      set<int> s;
        while(i<n && j<m){
            if(nums1[i]<nums2[j]){
              i++;
            }
            else if(nums1[i]>nums2[j]){
              j++;
            }
           else{
              s.insert(nums1[i]);
                i++;
                j++;
           }
        }
        //yaha par rem while loop kyu nahi likh rahe hai??
        //bec its like GCD question....we have to find the min of two arr.....so if 
        // 2 3 3 4 and 3 4, we need to find minimum.
        vector<int> ans;
        // for(int i=0;i<s.size();i++)
        for(auto i : s){
          ans.push_back(i);
        }
        return ans;    
    }
};