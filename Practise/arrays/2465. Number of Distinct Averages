You are given a 0-indexed integer array nums of even length.

As long as nums is not empty, you must repetitively:

Find the minimum number in nums and remove it.
Find the maximum number in nums and remove it.
Calculate the average of the two removed numbers.
The average of two numbers a and b is (a + b) / 2.

For example, the average of 2 and 3 is (2 + 3) / 2 = 2.5.
Return the number of distinct averages calculated using the above process.

Note that when there is a tie for a minimum or maximum number, any can be removed.

 

Example 1:

Input: nums = [4,1,4,0,3,5]
Output: 2
Explanation:
1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].
2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].
3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.
Since there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.
Example 2:

Input: nums = [1,100]
Output: 1
Explanation:
There is only one average to be calculated after removing 1 and 100, so we return 1.






class Solution {
public:
    int distinctAverages(vector<int>& nums) {
        sort(nums.begin(),nums.end());

        int n= nums.size();
        int i=0,j=n-1;
        // float avg;
        set<double> s;

    while(i<=j){
       
         // int avg=(nums[i]+nums[j])/2;
        //ealrier if we take avg as int, then suppose after solving we get 2.45 so in set
        // 2 will be stored and we want whole of it to be stored.
        //hence float or double will work.....
        //float specficially will make any whole no like if we get 4 to 4.000
        //but double will not add extra decimal and can accept 4 also...as souble dont care about 
        //decimals like float does.
        double x= (1.0)*((double)(nums[i])+(double)(nums[j]))/2;
        s.insert(x);
        i++;
        j--;

    }

     return s.size(); 
    }
};