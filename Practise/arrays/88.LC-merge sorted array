You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.


approach 1

////////////////////////////////////////////

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        //mistake 1: kept updating nums1 only in while that disturbed the arr before even checking
        //mistake 2: a vector arr of 0(n+m) space needs to be created here...not with v.size();
        //mistake 3: at for loop while copying, no pushback to nums1 as it will append not overwrite.
        
      
      
     int i=0,j=0,count=0;
     vector<int> v(m+n);

    while(i<m && j<n){
       
       if(nums1[i]<nums2[j]){
           v[count++]=nums1[i++];
       }
       else{
           v[count++]=nums2[j++];
      }
       
    }
    while(i<m){
         v[count++]=nums1[i++];
    }
    while(j<n){
        v[count++]=nums2[j++];
    }
    for(int i=0;i<m+n;i++){
    //   nums1.push_back(v[m]);
       nums1[i]=v[i];
    }
    
        
    }

 };

/////////////////////////////////////////////////
approach 2
//2nd approach

// Two pointer can used here by keeping pointers from back and keep decrementing our pointers and keep adding the larger elements in back.
// NOTE: Since arr1 can accomadate all the elemnts but m is given without zeroes counting so take care of that i.e take k=m+n-1
// Some confusion that can occur: Why we check if arr2 is empty why not arr1
// Since we have to fill the first array so we only need to cover the second array because if second will be empty we can directly return our first one as its but if first one is empty we have to move second array in first and then return. Since first can't be actually empty but m is given without zeroes counting so when m=0 we might take that as empty so just traverse second wholely.


// 0(1) space complexity
//three pointers


class Solution{
    public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m-1;
        int j=n-1;
        int count=m+n-1;

        while(i>=0 && j>=0){
            if(nums1[i]<nums2[j]){
                nums1[count--]=nums2[j--];
            }
            else{
                nums1[count--]=nums1[i--];
            }
        }
        while(j>=0){
          nums1[count--]=nums2[j--];
        }
          while(i>=0){
            nums1[count--] = nums1[i--];
        }

    }

};