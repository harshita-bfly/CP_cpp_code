Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:

Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.


class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        int j = 1 ,i = 0;
        while(j< nums.size() && i < nums.size())
        {
            if(nums[i]%2 && !(nums[j]%2))  //if odd digit is present in even position or even element is present in odd position then swap them
            {
                swap(nums[i] , nums[j]);
            }
            if(!(nums[i]%2)) //if even conditions are fulfilled then increment by 2 to the next even position.
                i+=2;

            if(nums[j]%2)  //if odd conditions are fulfilled then increment by 2 to the next odd position.
                j += 2;
        }
        return nums;
    }
};