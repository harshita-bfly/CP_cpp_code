You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:

i < j < k,
nums[j] - nums[i] == diff, and
nums[k] - nums[j] == diff.
Return the number of unique arithmetic triplets.

 

Example 1:

Input: nums = [0,1,4,6,7,10], diff = 3
Output: 2
Explanation:
(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.
(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. 
Example 2:

Input: nums = [4,5,6,7,8,9], diff = 2
Output: 2
Explanation:
(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.
(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.
 


 
class Solution {
public:
    int arithmeticTriplets(vector<int>& nums, int diff) {

    //kindaaa tough  if strictly using these three ptrs.

    //Ist approach

//     int n=nums.size();
//     int count=0;

//    //runtime: 755ms ....veryyyy badddd
//     for(int i=0;i<n-2;i++){
//         for(int j=0;j<n-1;j++){
//             for(int k=0;k<n;k++){
//                 if((nums[j] - nums[i] == diff) && (nums[k] - nums[j] == diff)){
//                  count++;
//                 }
          
//             }
//         }

//     }
//     return count;

  IInd approach

  int n=nums.size();
    int count=0;

//   runtime:  18ms....good
    for(int i=0;i<n-2;i++){
        for(int j=0;j<n-1;j++){
            if(nums[j] - nums[i] == diff){
                 for(int k=0;k<n;k++){
                     if((nums[k] - nums[j] == diff)){
                       count++;
                    }
          

                 }
                
            }
            
        }

     }
     return count;

    //using sets
    
   

};