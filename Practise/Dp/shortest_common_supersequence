Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation:
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
Example 2:

Input: str1 = "aaaaaaaa", str2 = "aaaaaaaa"
Output: "aaaaaaaa"

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of lowercase English letters.

////////////////////////////////////////

class Solution {
public:
string shortestCommonSupersequence(string str1, string str2) {

        int n= str1.size(); //size cal
        int m = str2.size();

       return helperLcs(str1,str2, n ,m); //lcs call
    }

    string helperLcs(string str1, string str2, int n, int m){

        int t[n+1][m+1]; //matrix banaya

     for(int i=0;i<n+1;i++){
        for(int j =0;j<m+1;j++){
            if(i==0 || j==0){ //initailization
                t[i][j]=0;
            }
        }
      }

     for(int i=1;i<n+1;i++){
        for(int j =1;j<m+1;j++){

            if(str1[i-1]==str2[j-1]){
                t[i][j]=t[i-1][j-1]+1;  //lcs banwa daala
            }
            else{
                t[i][j]=max(t[i][j-1], t[i-1][j]);
            }

        }
     }

     //printing supersequence.....yaha har ek letter jo even equal bhi nahi hai..wo bhi print hoga

     int i=n; //ptrs use
     int j=m;
     string s;

     while(i>0 && j>0){
        if(str1[i-1]==str2[j-1]){ //diagonally
            s.push_back(str1[i-1]);
            i--;
            j--;
        }
        else{
            if(t[i-1][j]>t[i][j-1]){
                s.push_back(str1[i-1]);
                i--;
            }
            else{
                s.push_back(str2[j-1]);
                j--;
            }
        }
     }
     while(i>0){ //rem bhi print hoga
         s.push_back(str1[i-1]);
         i--;
     }
     while(j > 0) {
        s.push_back(str2[j-1]);
        j--;
      }

      reverse(s.begin(),s.end()); //ans
      return s;


    }

};
