Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.


class Solution {
public:
    int minInsertions(string s) {
        int n= s.size(); //cal size
        string b;
        for(int i= s.size()-1;i>=0;i--){ //reverse of s
            b.push_back(s[i]);
        }
        int m =b.size();
        return helper(s,b,n,m); //to calculate LPS(longest paloindromic subsequence)
        
    }
    int helper(string s, string b, int n, int m){//lcs cal

        int t[n+1][m+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<m+1;j++){
                if(i==0 || j==0){
                    t[i][j]=0;
                }
            }
        }

        for(int i=1;i<n+1;i++){
            for(int j=1;j<m+1;j++){
                if(s[i-1]==b[j-1]){
                    t[i][j]=t[i-1][j-1]+1;
                }
                else{
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
                }

            }
        }

       return (n-t[n][m]); //min no deletions by cal LPS using LCS.

    }
};